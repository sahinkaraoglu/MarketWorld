@{
    ViewData["Title"] = "Ürün Yönetimi";
}

<div class="container-fluid p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center">
            <input type="text" id="productCodeSearch" class="form-control me-2" placeholder="Ürün Kodu..." style="width: 250px;">
            <select class="form-select ms-2" id="statusFilter" style="width: 150px;">
                <option selected>Durum</option>
                <option value="all">Tümü</option>
                <option value="active">Aktif</option>
                <option value="inactive">Pasif</option>
            </select>
        </div>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProductModal">
            <i class="bi bi-plus-lg"></i> Ürün Ekle
        </button>
    </div>

    <div class="card shadow-sm">
        <div class="card-body p-0">
            <table class="table table-hover mb-0">
                <thead class="bg-light">
                    <tr>
                        <th class="ps-4">
                            <input type="checkbox" class="form-check-input">
                        </th>
                        <th>GÖRSEL</th>
                        <th>ÜRÜN KODU</th>
                        <th>ÜRÜN ADI</th>
                        <th>STOK</th>
                        <th>FİYAT</th>
                        <th>DEĞERLENDİRME</th>
                        <th>DURUM</th>
                        <th class="text-end pe-4">İŞLEMLER</th>
                    </tr>
                </thead>
                <tbody id="productTableBody">
                    <!-- Ürünler AJAX ile yüklenecek -->
                    <tr>
                        <td colspan="9" class="text-center p-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Yükleniyor...</span>
                            </div>
                            <p class="mt-2">Ürünler yükleniyor...</p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    
    <div id="loadingIndicator" class="text-center my-3 d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Yükleniyor...</span>
        </div>
    </div>
    
    <!-- Sayfalama kontrolleri -->
    <div class="d-flex justify-content-between align-items-center mt-4">
        <div class="text-muted">
            <span id="totalProductCount">@ViewBag.TotalProducts</span> Ürün
        </div>
        <nav aria-label="Sayfa navigasyonu">
            <ul class="pagination" id="pagination">
                <!-- Sayfa numaraları burada oluşturulacak -->
            </ul>
        </nav>
    </div>
</div>

<!-- Yeni Ürün Ekleme Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Yeni Ürün Ekle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="addProductForm" asp-controller="Admin" asp-action="AddProduct" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Ürün Adı</label>
                            <input type="text" name="Name" class="form-control" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Marka</label>
                            <select name="BrandId" class="form-select" required>
                                <option value="">Marka Seçiniz</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Kategori</label>
                            <select id="categorySelect" class="form-select" required>
                                <option value="">Kategori Seçiniz</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Alt Kategori</label>
                            <select name="SubCategoryId" id="subCategorySelect" class="form-select" required>
                                <option value="">Önce Kategori Seçiniz</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label class="form-label">Fiyat</label>
                            <input type="number" name="Price" class="form-control" step="0.01" required>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">İndirimli Fiyat</label>
                            <input type="number" name="DiscountPrice" class="form-control" step="0.01">
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Stok</label>
                            <input type="number" name="Stock" class="form-control" required>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Açıklama</label>
                        <textarea name="Description" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="form-check">
                                <input type="checkbox" name="IsActive" class="form-check-input" value="true" checked>
                                <input type="hidden" name="IsActive" value="false">
                                <label class="form-check-label">Aktif</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input type="checkbox" name="HasDiscount" class="form-check-input" value="true">
                                <input type="hidden" name="HasDiscount" value="false">
                                <label class="form-check-label">İndirimli</label>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Ürün Resimleri</label>
                        <input type="file" name="Images" class="form-control" multiple accept="image/*">
                    </div>
                    
                    <div class="mb-3">
                        <h5>Ürün Özellikleri</h5>
                        <div id="propertyContainer">
                            <button type="button" class="btn btn-sm btn-outline-primary mb-3" id="addPropertyBtn">
                                <i class="bi bi-plus"></i> Yeni Özellik Ekle
                            </button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="submit" class="btn btn-primary">Kaydet</button>
                </div>
            </form>
        </div>
    </div>
</div>



@section Styles {
    <style>
        .table th {
            font-size: 0.875rem;
            font-weight: 600;
            text-transform: uppercase;
            color: #6c757d;
        }

        .table td {
            vertical-align: middle;
            font-size: 0.875rem;
            max-width: 250px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .rating i {
            font-size: 0.875rem;
        }

        .badge {
            font-weight: 500;
            padding: 0.5rem 0.75rem;
        }

        .bg-success-subtle {
            background-color: rgba(25, 135, 84, 0.1) !important;
        }

        .bg-primary-subtle {
            background-color: rgba(13, 110, 253, 0.1) !important;
        }

        .bg-danger-subtle {
            background-color: rgba(220, 53, 69, 0.1) !important;
        }

        .dropdown-item i {
            width: 1rem;
        }
        
        .pagination .page-link {
            color: #6c757d;
            border-color: #dee2e6;
        }
        
        .pagination .page-item.active .page-link {
            background-color: #0d6efd;
            border-color: #0d6efd;
            color: #fff;
        }
        
        .pagination .page-link:focus {
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
    </style>
}
@section Scripts {
    <script>
        $(document).ready(function() {
            let currentPage = 1;
            const PAGE_SIZE = 30;
            let totalPages = 0;
            let totalProducts = 0;
            let isLoading = false;
            
            // Sayfa ilk yüklendiğinde toplam ürün sayısını ViewBag'den al
            totalProducts = parseInt($('#totalProductCount').text()) || 0;
            
            // Sayfa yüklendiğinde ürünleri getir
            loadProducts(1);
            
            // Ürün kodu ile arama yapma (tipleme bittikten 500ms sonra çalış)
            let searchTimeout;
            $('#productCodeSearch').on('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    loadProducts(1);
                }, 500);
            });
            
            // Durum filtresi değiştiğinde
            $('#statusFilter').change(function() {
                loadProducts(1);
            });
            
            function loadProducts(page) {
                // Zaten bir yükleme işlemi varsa tekrar çağırma
                if (isLoading) return;
                
                isLoading = true;
                $('#loadingIndicator').removeClass('d-none');
                
                // İlk kez yükleniyorsa loading göster, yoksa mevcut satırları tut
                if (page === 1) {
                    $('#productTableBody').html(`
                        <tr>
                            <td colspan="9" class="text-center p-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Yükleniyor...</span>
                                </div>
                                <p class="mt-2">Ürünler yükleniyor...</p>
                            </td>
                        </tr>
                    `);
                }
                
                let productCode = $('#productCodeSearch').val().trim();
                let statusFilter = $('#statusFilter').val();
                
                $.ajax({
                    url: '/Admin/Panel/GetProducts',
                    method: 'GET',
                    data: {
                        page: page,
                        pageSize: PAGE_SIZE,
                        productCode: productCode,
                        status: statusFilter
                    },
                    success: function(response) {
                        if (response.products && response.products.length > 0) {
                            $('#productTableBody').empty();
                            
                            // Ürünleri eklemeden önce batch halinde DOM işlemi yapmak için HTML string oluştur
                            let rowsHtml = '';
                            response.products.forEach(function(product) {
                                rowsHtml += createProductRow(product);
                            });
                            
                            // Tek bir DOM manipülasyonu ile tüm satırları ekle
                            $('#productTableBody').html(rowsHtml);
                            
                            // Sayfalama bilgilerini güncelle
                            currentPage = page;
                            totalPages = response.totalPages;
                            totalProducts = response.totalProducts;
                            
                            // Sayfa numaralarını oluştur
                            renderPagination();
                            
                            // Toplam ürün sayısını göster
                            $('#totalProductCount').text(totalProducts);
                        } else {
                            $('#productTableBody').html('<tr><td colspan="9" class="text-center">Ürün bulunamadı</td></tr>');
                            $('#pagination').empty();
                            $('#totalProductCount').text('0');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Ürünler yüklenirken bir hata oluştu:', error);
                        $('#productTableBody').html('<tr><td colspan="9" class="text-center text-danger">Ürünler yüklenirken bir hata oluştu</td></tr>');
                    },
                    complete: function() {
                        $('#loadingIndicator').addClass('d-none');
                        isLoading = false;
                    }
                });
            }
            
            // Ürün satırını HTML string olarak oluştur
            function createProductRow(product) {
                let statusBadge = product.status === "Published" ? 
                    '<span class="badge bg-success-subtle text-success">Aktif</span>' : 
                    '<span class="badge bg-danger-subtle text-danger">Pasif</span>';
                
                let stars = '';
                for (let i = 1; i <= 5; i++) {
                    if (i <= product.rating) {
                        stars += '<i class="bi bi-star-fill text-warning"></i>';
                    } else if (i - product.rating < 1 && i - product.rating > 0) {
                        stars += '<i class="bi bi-star-half text-warning"></i>';
                    } else {
                        stars += '<i class="bi bi-star text-warning"></i>';
                    }
                }
                
                return `
                    <tr data-product-id="${product.id}">
                        <td class="ps-4">
                            <input type="checkbox" class="form-check-input">
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <img src="${product.imageUrl}" class="rounded" style="width: 40px; height: 40px; object-fit: cover;"
                                     onerror="this.src='/img/ProductsPicture/default.jpg';">
                            </div>
                        </td>
                        <td>${product.productCode}</td>
                        <td><div class="text-truncate" style="max-width: 200px;" title="${product.name}">${product.name}</div></td>
                        <td>
                            ${product.stock}
                            ${product.stock < 5 ? '<br><span class="text-warning">Düşük stok</span>' : ''}
                        </td>
                        <td>${new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(product.price)}</td>
                        <td>
                            <div class="rating">
                                ${stars}
                                <span class="ms-1">(${product.rating})</span>
                            </div>
                        </td>
                        <td>${statusBadge}</td>
                        <td class="text-end pe-4">
                            <div class="d-flex gap-1 justify-content-end">
                                <a href="#" class="btn btn-sm btn-outline-primary" onclick="editProduct(${product.id})" title="Düzenle">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                <a href="#" class="btn btn-sm btn-outline-danger" onclick="deleteProduct(${product.id}); return false;" title="Sil">
                                    <i class="bi bi-trash"></i>
                                </a>
                                <a href="/Product/Detail/${product.id}" class="btn btn-sm btn-outline-info" title="Görüntüle">
                                    <i class="bi bi-eye"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                `;
            }
            
            function renderPagination() {
                $('#pagination').empty();
                
                // Önceki sayfa butonu
                let prevDisabled = currentPage === 1 ? 'disabled' : '';
                $('#pagination').append(`
                    <li class="page-item ${prevDisabled}">
                        <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="Önceki">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                `);
                
                // Sayfa numaraları
                let startPage = Math.max(1, currentPage - 2);
                let endPage = Math.min(totalPages, startPage + 4);
                
                // Başlangıç sayfası ayarlanırken, toplam 5 sayfa gösterilmesini sağla
                if (endPage - startPage < 4 && startPage > 1) {
                    startPage = Math.max(1, endPage - 4);
                }
                
                for (let i = startPage; i <= endPage; i++) {
                    let active = i === currentPage ? 'active' : '';
                    $('#pagination').append(`
                        <li class="page-item ${active}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `);
                }
                
                // Sonraki sayfa butonu
                let nextDisabled = currentPage === totalPages || totalPages === 0 ? 'disabled' : '';
                $('#pagination').append(`
                    <li class="page-item ${nextDisabled}">
                        <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="Sonraki">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                `);
                
                // Sayfa numaralarına tıklama olayı
                $('.page-link').click(function(e) {
                    e.preventDefault();
                    
                    if (!$(this).parent().hasClass('disabled')) {
                        let page = $(this).data('page');
                        loadProducts(page);
                    }
                });
            }

            // Markaları yükle
            $.ajax({
                url: '/Admin/Panel/GetBrands',
                method: 'GET',
                success: function(brands) {
                    let options = '<option value="">Marka Seçiniz</option>';
                    brands.forEach(function(brand) {
                        options += `<option value="${brand.id}">${brand.name}</option>`;
                    });
                    $('select[name="BrandId"]').html(options);
                }
            });

            // Kategorileri yükle
            $.ajax({
                url: '/Admin/Panel/GetCategories',
                method: 'GET',
                success: function(categories) {
                    let options = '<option value="">Kategori Seçiniz</option>';
                    categories.forEach(function(category) {
                        options += `<option value="${category.id}">${category.name}</option>`;
                    });
                    $('#categorySelect').html(options);
                }
            });

            // Alt kategorileri yükle
            $('#categorySelect').change(function() {
                let categoryId = $(this).val();
                if (categoryId) {
                    $.ajax({
                        url: '/Admin/Panel/GetSubCategories/' + categoryId,
                        method: 'GET',
                        success: function(subCategories) {
                            let options = '<option value="">Alt Kategori Seçiniz</option>';
                            subCategories.forEach(function(subCategory) {
                                options += `<option value="${subCategory.id}">${subCategory.name}</option>`;
                            });
                            $('#subCategorySelect').html(options);
                        }
                    });
                } else {
                    $('#subCategorySelect').html('<option value="">Önce Kategori Seçiniz</option>');
                }
            });

            // Ürün silme işlemi
            window.deleteProduct = function(id) {
                if (confirm('Bu ürünü silmek istediğinizden emin misiniz?')) {
                    $.ajax({
                        url: '/Admin/Panel/DeleteProduct/' + id,
                        method: 'POST',
                        success: function(response) {
                            loadProducts(currentPage);
                        },
                        error: function(xhr, status, error) {
                            alert('Ürün silinirken bir hata oluştu: ' + error);
                        }
                    });
                }
            };

            // Ürün düzenleme işlemi
            window.editProduct = function(id) {
                $.ajax({
                    url: '/Admin/Panel/GetProduct/' + id,
                    method: 'GET',
                    success: function(product) {
                        // Ürün bilgilerini doldur
                        $('#editProductId').val(product.id);
                        $('#editProductName').val(product.name);
                        $('#editProductPrice').val(product.price);
                        $('#editProductStock').val(product.stock);
                        $('#editProductDescription').val(product.description);
                        $('#editProductIsActive').prop('checked', product.isActive);
                        
                        // Modal'ı göster
                        $('#editProductModal').modal('show');
                    },
                    error: function(xhr, status, error) {
                        alert('Ürün bilgileri yüklenirken bir hata oluştu: ' + error);
                    }
                });
            };

            $.ajax({
                url: '/Panel/GetPropertyTypes',
                method: 'GET',
                success: function(propertyTypes) {
                    console.log('Yüklenen özellik tipleri:', propertyTypes);
                    window.propertyTypes = propertyTypes;
                },
                error: function(xhr, status, error) {
                    console.error('Özellik tipleri yükleme hatası:', error);
                }
            });

            $('#addPropertyBtn').click(function() {
                addPropertyRow();
            });

            function addPropertyRow() {
                var propertyRowId = Date.now(); // Benzersiz ID oluştur
                var propertyRow = `
                    <div class="card mb-3 property-row" id="property-${propertyRowId}">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <label class="form-label">Özellik Tipi</label>
                                    <select class="form-select property-type-select" data-row-id="${propertyRowId}">
                                        <option value="">Özellik Tipi Seçiniz</option>
                                        ${window.propertyTypes ? window.propertyTypes.map(pt => `<option value="${pt.id}">${pt.name}</option>`).join('') : ''}
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Özellik Değeri</label>
                                    <select class="form-select property-value-select" data-row-id="${propertyRowId}" disabled>
                                        <option value="">Önce Özellik Tipi Seçiniz</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label class="form-label">Stok</label>
                                    <input type="number" class="form-control property-stock" data-row-id="${propertyRowId}" min="0" value="0">
                                </div>
                                <div class="col-md-2">
                                    <label class="form-label">Aktif</label>
                                    <div class="form-check mt-2">
                                        <input type="checkbox" class="form-check-input property-active" data-row-id="${propertyRowId}" checked>
                                    </div>
                                </div>
                                <div class="col-md-1">
                                    <label class="form-label">&nbsp;</label>
                                    <button type="button" class="btn btn-sm btn-danger d-block" onclick="removePropertyRow(${propertyRowId})">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                $('#propertyContainer').append(propertyRow);

                $(`.property-type-select[data-row-id="${propertyRowId}"]`).change(function() {
                    var propertyTypeId = $(this).val();
                    var valueSelect = $(`.property-value-select[data-row-id="${propertyRowId}"]`);
                    
                    valueSelect.empty().append('<option value="">Özellik Değeri Seçiniz</option>');
                    valueSelect.prop('disabled', !propertyTypeId);
                    
                    if (propertyTypeId) {
                        $.ajax({
                            url: '/Panel/GetPropertyValues/' + propertyTypeId,
                            method: 'GET',
                            success: function(propertyValues) {
                                console.log('Gelen özellik değerleri:', propertyValues);
                                if (propertyValues && propertyValues.length > 0) {
                                    propertyValues.forEach(function(pv) {
                                        valueSelect.append(
                                            $('<option></option>')
                                                .val(pv.id)
                                                .text(pv.value)
                                        );
                                    });
                                } else {
                                    valueSelect.append(
                                        $('<option></option>')
                                            .val('')
                                            .text('Bu özellik tipinde değer yok')
                                    );
                                }
                            },
                            error: function(xhr, status, error) {
                                console.error('Özellik değerleri yükleme hatası:', error);
                                alert('Özellik değerleri yüklenirken bir hata oluştu: ' + error);
                            }
                        });
                    }
                });
            }

            // Form submit işlemini JavaScript ile yapalım
            $('#addProductForm').submit(function(e) {
                e.preventDefault();
                
                var formData = new FormData();
                formData.append('Name', $('input[name="Name"]').val());
                formData.append('BrandId', $('select[name="BrandId"]').val());
                formData.append('SubCategoryId', $('#subCategorySelect').val());
                formData.append('Price', $('input[name="Price"]').val());
                formData.append('DiscountPrice', $('input[name="DiscountPrice"]').val() || '0');
                formData.append('Stock', $('input[name="Stock"]').val());
                formData.append('Description', $('textarea[name="Description"]').val());
                formData.append('IsActive', $('input[name="IsActive"]').is(':checked'));
                formData.append('HasDiscount', $('input[name="HasDiscount"]').is(':checked'));

                // Resimleri ekle
                var files = $('input[name="Images"]')[0].files;
                for (var i = 0; i < files.length; i++) {
                    formData.append('Images', files[i]);
                }

                $('.property-row').each(function(index) {
                    var rowId = $(this).attr('id').split('-')[1];
                    var propertyTypeId = $(`.property-type-select[data-row-id="${rowId}"]`).val();
                    var propertyValueId = $(`.property-value-select[data-row-id="${rowId}"]`).val();
                    var stock = $(`.property-stock[data-row-id="${rowId}"]`).val();
                    var isActive = $(`.property-active[data-row-id="${rowId}"]`).is(':checked');
                    
                    if (propertyTypeId && propertyValueId) {
                        formData.append(`ProductProperties[${index}].PropertyTypeId`, propertyTypeId);
                        formData.append(`ProductProperties[${index}].PropertyValueId`, propertyValueId);
                        formData.append(`ProductProperties[${index}].Stock`, stock);
                        formData.append(`ProductProperties[${index}].IsActive`, isActive);
                    }
                });

                $.ajax({
                    url: '/Panel/AddProduct',
                    method: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        $('#addProductModal').modal('hide');
                        location.reload();
                    },
                    error: function(xhr, status, error) {
                        console.error('Ürün ekleme hatası:', error);
                        if (xhr.responseJSON) {
                            var errors = xhr.responseJSON;
                            var errorMessages = [];
                            Object.keys(errors).forEach(function(key) {
                                errorMessages.push(key + ': ' + errors[key].join(', '));
                            });
                            alert('Hata:\n' + errorMessages.join('\n'));
                        } else {
                            alert('Bir hata oluştu: ' + error);
                        }
                    }
                });
            });
        });

        function removePropertyRow(rowId) {
            $(`#property-${rowId}`).remove();
        }
    </script>
} 