// <auto-generated />
using System;
using MarketWorld.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarketWorld.Infrastructure.Migrations
{
    [DbContext(typeof(MarketWorldDbContext))]
    [Migration("20250316200844_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MarketWorld.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(743),
                            IsDeleted = false,
                            Name = "Apple",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(746),
                            IsDeleted = false,
                            Name = "Samsung",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(748),
                            IsDeleted = false,
                            Name = "Xiaomi",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(749),
                            IsDeleted = false,
                            Name = "Huawei",
                            SubCategoryId = 3
                        });
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(482),
                            Description = "Elektronik ürünler, bilgisayarlar, telefonlar ve diğer teknolojik cihazlar",
                            IsDeleted = false,
                            Name = "Elektronik",
                            SeoName = "elektronik"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(495),
                            Description = "Erkek, kadın ve çocuk giyim ürünleri ve aksesuarları",
                            IsDeleted = false,
                            Name = "Giyim & Aksesuar",
                            SeoName = "giyim-aksesuar"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(496),
                            Description = "Ev dekorasyon, mobilya, mutfak eşyaları ve ev tekstili",
                            IsDeleted = false,
                            Name = "Ev & Yaşam",
                            SeoName = "ev-yasam"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(497),
                            Description = "Kozmetik ürünleri, parfümler ve kişisel bakım ürünleri",
                            IsDeleted = false,
                            Name = "Kozmetik & Kişisel Bakım",
                            SeoName = "kozmetik-kisisel-bakim"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(499),
                            Description = "Spor ekipmanları, spor giyim ve outdoor aktivite ürünleri",
                            IsDeleted = false,
                            Name = "Spor & Outdoor",
                            SeoName = "spor-outdoor"
                        });
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(859),
                            EntityId = 1,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneOne/resimbir.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(862),
                            EntityId = 1,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneOne/resimiki.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(863),
                            EntityId = 1,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneOne/resimuc.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(864),
                            EntityId = 1,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneOne/resimdort.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(865),
                            EntityId = 2,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneTwo/resimbir.jpg"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(868),
                            EntityId = 2,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneTwo/resimiki.jpg"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(869),
                            EntityId = 2,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneTwo/resimuc.jpg"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(870),
                            EntityId = 2,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneTwo/resimdort.jpg"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(871),
                            EntityId = 3,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneThree/resimbir.jpg"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(873),
                            EntityId = 3,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneThree/resimiki.jpg"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(874),
                            EntityId = 3,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneThree/resimuc.jpg"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(875),
                            EntityId = 3,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneThree/resimdort.jpg"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(876),
                            EntityId = 4,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneFour/resimbir.jpg"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(878),
                            EntityId = 4,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneFour/resimiki.jpg"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(879),
                            EntityId = 4,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneFour/resimuc.jpg"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(881),
                            EntityId = 4,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneFour/resimdort.jpg"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(882),
                            EntityId = 5,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneFive/resimbir.jpg"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(884),
                            EntityId = 5,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneFive/resimiki.jpg"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(885),
                            EntityId = 5,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneFive/resimuc.jpg"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(886),
                            EntityId = 5,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneFive/resimdort.jpg"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(887),
                            EntityId = 6,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneSix/resimbir.jpg"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(888),
                            EntityId = 6,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneSix/resimiki.jpg"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(889),
                            EntityId = 6,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneSix/resimuc.jpg"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(891),
                            EntityId = 6,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneSix/resimdort.jpg"
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(892),
                            EntityId = 7,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneSeven/resimbir.jpg"
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(893),
                            EntityId = 7,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneSeven/resimiki.jpg"
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(894),
                            EntityId = 7,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneSeven/resimuc.jpg"
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(895),
                            EntityId = 7,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneSeven/resimdort.jpg"
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(896),
                            EntityId = 8,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneEight/resimbir.jpg"
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(897),
                            EntityId = 8,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneEight/resimiki.jpg"
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(898),
                            EntityId = 8,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneEight/resimuc.jpg"
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(899),
                            EntityId = 8,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneEight/resimdort.jpg"
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(901),
                            EntityId = 9,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneNine/resimbir.jpg"
                        },
                        new
                        {
                            Id = 34,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(902),
                            EntityId = 9,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneNine/resimiki.jpg"
                        },
                        new
                        {
                            Id = 35,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(904),
                            EntityId = 9,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneNine/resimuc.jpg"
                        },
                        new
                        {
                            Id = 36,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(905),
                            EntityId = 9,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneNine/resimdort.jpg"
                        },
                        new
                        {
                            Id = 37,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(906),
                            EntityId = 10,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneTen/resimbir.jpg"
                        },
                        new
                        {
                            Id = 38,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(907),
                            EntityId = 10,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneTen/resimiki.jpg"
                        },
                        new
                        {
                            Id = 39,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(908),
                            EntityId = 10,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneTen/resimuc.jpg"
                        },
                        new
                        {
                            Id = 40,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(909),
                            EntityId = 10,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Telephones/TelephoneTen/resimdort.jpg"
                        },
                        new
                        {
                            Id = 41,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(910),
                            EntityId = 11,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Pc/PcOne/resimbir.jpg"
                        },
                        new
                        {
                            Id = 42,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(911),
                            EntityId = 11,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Pc/PcOne/resimiki.jpg"
                        },
                        new
                        {
                            Id = 43,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(912),
                            EntityId = 11,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Pc/PcOne/resimuc.jpg"
                        },
                        new
                        {
                            Id = 44,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(914),
                            EntityId = 11,
                            EntityType = 1,
                            IsDeleted = false,
                            Path = "img/ProducsPicture/Pc/PcOne/resimdort.jpg"
                        });
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(783),
                            Description = "Apple iPhone 14 Pro 256 GB",
                            DiscountPrice = 54999.99m,
                            HasDiscount = true,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "iPhone 14 Pro",
                            Price = 56999.99m,
                            Rating = 5m,
                            Stock = 100,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(787),
                            Description = "Samsung Galaxy S23 Ultra 256 GB",
                            DiscountPrice = 65999.99m,
                            HasDiscount = true,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Samsung Galaxy S23 Ultra",
                            Price = 75999.99m,
                            Rating = 5m,
                            Stock = 150,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(790),
                            Description = "Apple iPhone 15 128 GB Mavi",
                            DiscountPrice = 39999.99m,
                            HasDiscount = true,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "iPhone 15 128 GB",
                            Price = 49999.99m,
                            Rating = 4m,
                            Stock = 150,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 3,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(793),
                            Description = "Xiaomi 13T Pro 512 GB",
                            DiscountPrice = 37999.99m,
                            HasDiscount = true,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Xiaomi 13T Pro",
                            Price = 39999.99m,
                            Rating = 3m,
                            Stock = 75,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 4,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(796),
                            Description = "Huawei P60 Pro 256 GB",
                            DiscountPrice = 0m,
                            HasDiscount = false,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Huawei P60 Pro",
                            Price = 44999.99m,
                            Rating = 4m,
                            Stock = 60,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(799),
                            Description = "Samsung Galaxy Z Fold5 512 GB",
                            DiscountPrice = 84999.99m,
                            HasDiscount = true,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Samsung Galaxy Z Fold5",
                            Price = 89999.99m,
                            Rating = 4.9m,
                            Stock = 40,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(802),
                            Description = "Apple iPhone 15 Pro Max 512 GB",
                            DiscountPrice = 0m,
                            HasDiscount = false,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "iPhone 15 Pro Max",
                            Price = 92999.99m,
                            Rating = 3m,
                            Stock = 25,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 3,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(804),
                            Description = "Xiaomi Redmi Note 13 Pro+ 256 GB",
                            DiscountPrice = 27999.99m,
                            HasDiscount = true,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Xiaomi Redmi Note 13 Pro+",
                            Price = 29999.99m,
                            Rating = 4.2m,
                            Stock = 200,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(807),
                            Description = "Samsung Galaxy A54 128 GB",
                            DiscountPrice = 18499.99m,
                            HasDiscount = true,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Samsung Galaxy A54",
                            Price = 19999.99m,
                            Rating = 4.1m,
                            Stock = 300,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 4,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(810),
                            Description = "Huawei Nova 11 Pro 256 GB",
                            DiscountPrice = 0m,
                            HasDiscount = false,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Huawei Nova 11 Pro",
                            Price = 34999.99m,
                            Rating = 5m,
                            Stock = 85,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(833),
                            Description = "13inc Taşınabilir Bilgisayar Uzay Grisi MC7U4TU/A",
                            DiscountPrice = 0m,
                            HasDiscount = false,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "MacBook Air M2 16GB 256GB SSD",
                            Price = 41599.99m,
                            Rating = 5m,
                            Stock = 85,
                            SubCategoryId = 1
                        });
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.ProductProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyValueId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("PropertyValueId");

                    b.ToTable("ProductProperties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4285),
                            IsActive = true,
                            IsDeleted = false,
                            ProductId = 1,
                            PropertyTypeId = 1,
                            PropertyValueId = 1,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4291),
                            IsActive = true,
                            IsDeleted = false,
                            ProductId = 1,
                            PropertyTypeId = 1,
                            PropertyValueId = 2,
                            Stock = 45
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4293),
                            IsActive = true,
                            IsDeleted = false,
                            ProductId = 1,
                            PropertyTypeId = 1,
                            PropertyValueId = 3,
                            Stock = 40
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4294),
                            IsActive = true,
                            IsDeleted = false,
                            ProductId = 1,
                            PropertyTypeId = 1,
                            PropertyValueId = 4,
                            Stock = 35
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4296),
                            IsActive = true,
                            IsDeleted = false,
                            ProductId = 1,
                            PropertyTypeId = 2,
                            PropertyValueId = 5,
                            Stock = 100
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4298),
                            IsActive = true,
                            IsDeleted = false,
                            ProductId = 1,
                            PropertyTypeId = 2,
                            PropertyValueId = 6,
                            Stock = 75
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4299),
                            IsActive = true,
                            IsDeleted = false,
                            ProductId = 1,
                            PropertyTypeId = 2,
                            PropertyValueId = 7,
                            Stock = 50
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4301),
                            IsActive = true,
                            IsDeleted = false,
                            ProductId = 1,
                            PropertyTypeId = 2,
                            PropertyValueId = 8,
                            Stock = 25
                        });
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4170),
                            Description = "Ürün Renk Seçenekleri",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Renk"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4176),
                            Description = "Beden Seçenekleri",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Beden"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4178),
                            Description = "Dahili Hafıza",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Hafıza"
                        });
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.PropertyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("PropertyValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4202),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 1,
                            Value = "Uzay Siyahı"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4204),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 1,
                            Value = "Altın"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4206),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 1,
                            Value = "Gümüş"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4207),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 1,
                            Value = "Mor"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4208),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 2,
                            Value = "XS"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4210),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 2,
                            Value = "S"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4211),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 2,
                            Value = "M"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4212),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 2,
                            Value = "L"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4213),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 2,
                            Value = "XL"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4215),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 2,
                            Value = "XXL"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4216),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 3,
                            Value = "128GB"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4217),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 3,
                            Value = "256GB"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4218),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 3,
                            Value = "512GB"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(4219),
                            IsActive = true,
                            IsDeleted = false,
                            PropertyTypeId = 3,
                            Value = "1TB"
                        });
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(676),
                            Description = "Dizüstü, masaüstü bilgisayarlar ve tabletler",
                            IsDeleted = false,
                            Name = "Bilgisayarlar & Tabletler",
                            SeoName = "bilgisayarlar-tabletler"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(678),
                            Description = "Yazıcılar, tarayıcılar ve projeksiyon cihazları",
                            IsDeleted = false,
                            Name = "Yazıcılar & Projeksiyon",
                            SeoName = "yazicilar-projeksiyon"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(679),
                            Description = "Akıllı telefonlar ve aksesuarları",
                            IsDeleted = false,
                            Name = "Telefonlar",
                            SeoName = "telefonlar"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(681),
                            Description = "Buzdolabı, çamaşır makinesi ve diğer beyaz eşyalar",
                            IsDeleted = false,
                            Name = "Beyaz Eşya",
                            SeoName = "beyaz-esya"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(682),
                            Description = "Klimalar, ısıtıcılar ve hava temizleyiciler",
                            IsDeleted = false,
                            Name = "Klima ve Isıtıcılar",
                            SeoName = "klima-isitici"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(683),
                            Description = "Kadın, erkek ve çocuk ayakkabıları, çantalar ve aksesuarlar",
                            IsDeleted = false,
                            Name = "Ayakkabı & Çanta",
                            SeoName = "ayakkabi-canta"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(685),
                            Description = "Kadın giyim ürünleri, elbiseler, üst giyim ve alt giyim",
                            IsDeleted = false,
                            Name = "Kadın Giyim",
                            SeoName = "kadin-giyim"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(686),
                            Description = "Erkek giyim ürünleri, takım elbiseler, üst giyim ve alt giyim",
                            IsDeleted = false,
                            Name = "Erkek Giyim",
                            SeoName = "erkek-giyim"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(687),
                            Description = "Kız ve erkek çocuk giyim ürünleri",
                            IsDeleted = false,
                            Name = "Çocuk Giyim",
                            SeoName = "cocuk-giyim"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(688),
                            Description = "Oturma grupları, yatak odası, yemek odası ve ofis mobilyaları",
                            IsDeleted = false,
                            Name = "Mobilya",
                            SeoName = "mobilya"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(690),
                            Description = "Nevresim takımları, perdeler, halılar ve dekoratif tekstil ürünleri",
                            IsDeleted = false,
                            Name = "Ev Tekstili",
                            SeoName = "ev-tekstili"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(691),
                            Description = "Ev dekorasyon ürünleri, tablolar, aynalar ve aydınlatma sistemleri",
                            IsDeleted = false,
                            Name = "Dekorasyon & Aydınlatma",
                            SeoName = "dekorasyon-aydinlatma"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(692),
                            Description = "Pişirme, servis ve saklama ürünleri, mutfak aletleri",
                            IsDeleted = false,
                            Name = "Mutfak Gereçleri",
                            SeoName = "mutfak-gerecleri"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(693),
                            Description = "Banyo aksesuarları, temizlik ve düzenleme ürünleri",
                            IsDeleted = false,
                            Name = "Banyo & Ev Gereçleri",
                            SeoName = "banyo-ev-gerecleri"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(695),
                            Description = "Kırtasiye malzemeleri, ofis gereçleri ve okul ürünleri",
                            IsDeleted = false,
                            Name = "Kırtasiye & Ofis",
                            SeoName = "kirtasiye-ve-ofis"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(696),
                            Description = "Kadın ve erkek parfümleri, deodorantlar ve vücut spreyleri",
                            IsDeleted = false,
                            Name = "Parfüm & Deodorant",
                            SeoName = "parfum-deodorant"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(697),
                            Description = "Saç bakım ve şekillendirme ürünleri",
                            IsDeleted = false,
                            Name = "Saç Şekillendirme",
                            SeoName = "sac-sekillendirme"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(698),
                            Description = "Yüz ve vücut bakım ürünleri, kremler ve serumlar",
                            IsDeleted = false,
                            Name = "Cilt Bakımı",
                            SeoName = "cilt-bakimi"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(700),
                            Description = "Renkli kozmetik ve makyaj malzemeleri",
                            IsDeleted = false,
                            Name = "Makyaj",
                            SeoName = "makyaj"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(701),
                            Description = "Vitamin, takviye gıdalar ve medikal ürünler",
                            IsDeleted = false,
                            Name = "Sağlık & Medikal Ürünler",
                            SeoName = "saglik-medikal-urunler"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(703),
                            Description = "Diş bakım ürünleri ve ağız bakım ürünleri",
                            IsDeleted = false,
                            Name = "Ağız & Diş Bakımı",
                            SeoName = "agiz-dis-bakimi"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(704),
                            Description = "Fitness ekipmanları, kondisyon aletleri ve aksesuarları",
                            IsDeleted = false,
                            Name = "Fitness & Kondisyon",
                            SeoName = "fitness-kondisyon"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(705),
                            Description = "Spor giyim ürünleri, spor ayakkabılar ve aksesuarlar",
                            IsDeleted = false,
                            Name = "Spor Giyim & Ayakkabı",
                            SeoName = "spor-giyim-ayakkabi"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(707),
                            Description = "Kamp malzemeleri, outdoor giyim ve ekipmanlar",
                            IsDeleted = false,
                            Name = "Outdoor & Kamp",
                            SeoName = "outdoor-kamp"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(708),
                            Description = "Kayak ekipmanları ve kış sporları malzemeleri",
                            IsDeleted = false,
                            Name = "Kış Sporları",
                            SeoName = "kis-sporlari"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 3, 16, 23, 8, 44, 166, DateTimeKind.Local).AddTicks(709),
                            Description = "Yüzme ve su sporları ekipmanları",
                            IsDeleted = false,
                            Name = "Su Sporları",
                            SeoName = "su-sporlari"
                        });
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Address", b =>
                {
                    b.HasOne("MarketWorld.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Brand", b =>
                {
                    b.HasOne("MarketWorld.Domain.Entities.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Cart", b =>
                {
                    b.HasOne("MarketWorld.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("MarketWorld.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketWorld.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Image", b =>
                {
                    b.HasOne("MarketWorld.Domain.Entities.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Order", b =>
                {
                    b.HasOne("MarketWorld.Domain.Entities.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MarketWorld.Domain.Entities.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MarketWorld.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingAddress");

                    b.Navigation("ShippingAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("MarketWorld.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketWorld.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Payment", b =>
                {
                    b.HasOne("MarketWorld.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Product", b =>
                {
                    b.HasOne("MarketWorld.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MarketWorld.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("MarketWorld.Domain.Entities.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.ProductProperty", b =>
                {
                    b.HasOne("MarketWorld.Domain.Entities.Product", "Product")
                        .WithMany("ProductProperties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketWorld.Domain.Entities.PropertyType", "PropertyType")
                        .WithMany("ProductProperties")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MarketWorld.Domain.Entities.PropertyValue", "PropertyValue")
                        .WithMany("ProductProperties")
                        .HasForeignKey("PropertyValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PropertyType");

                    b.Navigation("PropertyValue");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.PropertyValue", b =>
                {
                    b.HasOne("MarketWorld.Domain.Entities.PropertyType", "PropertyType")
                        .WithMany("PropertyValues")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.SubCategory", b =>
                {
                    b.HasOne("MarketWorld.Domain.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductProperties");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.PropertyType", b =>
                {
                    b.Navigation("ProductProperties");

                    b.Navigation("PropertyValues");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.PropertyValue", b =>
                {
                    b.Navigation("ProductProperties");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketWorld.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
